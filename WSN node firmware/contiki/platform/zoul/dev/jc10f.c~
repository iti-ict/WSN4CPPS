/*
 * Copyright (c) 2016, Zolertia - http://www.zolertia.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
/*---------------------------------------------------------------------------*/
/**
 * \addtogroup zoul-relay
 * @{
 *
 * \file
 *  Driver for a relay actuator
 */
/*---------------------------------------------------------------------------*/
#include "contiki.h"
#include "jc10f.h"
#include "dev/gpio.h"
#include "dev/adc-sensors.h"
#include "dev/adc.h"
#include "lib/sensors.h"
#include "dev/ioc.h"
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
static int
status(int type)
{
  switch(type) {
  case SENSORS_ACTIVE:
    return 2;
  case SENSORS_READY:
    return 1;
  default:
    return JC10F_ERROR;
  }
}
/*---------------------------------------------------------------------------*/
static int
value(int type)
{
  switch(type) {
    case voltaje:
      //adc_sensors.configure(ANALOG_ESTANDAR_SENSOR, ADC3_PIN);
      return adc_sensors.value(ANALOG_ACC_SENSOR);

    case JC10F_OFF:
      return 0;
    
    default:
      return JC10F_ERROR;
  }
}
/*---------------------------------------------------------------------------*/
static int
configure(int type, int value)
{
  if(type != SENSORS_ACTIVE) {
    return JC10F_ERROR;
  }

  switch(value) {
    case ADC3_PIN:
    adc_sensors.configure(ANALOG_ACC_SENSOR, ADC3_PIN);
    return JC10F_SUCCESS;

    case ADC2_PIN:
    adc_sensors.configure(ANALOG_ACC_SENSOR, ADC2_PIN);
    return JC10F_SUCCESS;

    case ADC1_PIN:
    adc_sensors.configure(ANALOG_ACC_SENSOR, ADC1_PIN);
    return JC10F_SUCCESS;


  }

  return JC10F_SUCCESS;
}
/*---------------------------------------------------------------------------*/
SENSORS_SENSOR(jc10f, JC10F_SENSOR, value, configure, status);
/*---------------------------------------------------------------------------*/
/** @} */
